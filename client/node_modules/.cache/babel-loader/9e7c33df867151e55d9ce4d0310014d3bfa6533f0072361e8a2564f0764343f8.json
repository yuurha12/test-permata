{"ast":null,"code":"var _jsxFileName = \"/home/kiki/Documents/test/permata-test/client/src/components/card/TodoList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { CloseSquareOutlined, FormOutlined } from \"@ant-design/icons\";\nimport { Spinner, Badge, Button, Card, Col, Container, FormControl, FormLabel, InputGroup, Row } from \"react-bootstrap\";\nimport { API } from \"../../config/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TodoList() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [newCategoryInput, setNewCategoryInput] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"All Tasks\");\n  const [newTaskInput, setNewTaskInput] = useState(\"\");\n  const {\n    isLoading: isLoadingCategories,\n    data: categoriesData,\n    isError: isErrorCategories\n  } = useQuery(\"categories\", async () => {\n    const response = await API.get(\"/categories\");\n    return response.data.categories;\n  });\n  useEffect(() => {\n    if (categoriesData && categoriesData.length > 0) {\n      setCategories(categoriesData);\n      setSelectedCategory(categoriesData[0].name);\n    }\n  }, [categoriesData]);\n\n  // Fetch tasks\n  const {\n    isLoading: isLoadingTasks,\n    data: tasksData,\n    isError: isErrorTasks\n  } = useQuery(\"tasks\", async () => {\n    const response = await API.get(\"/tasks\");\n    return response.data.tasks;\n  });\n  useEffect(() => {\n    if (tasksData) {\n      setTasks(tasksData);\n    }\n  }, [tasksData]);\n  const handleBadge = useCallback(async id => {\n    const task = tasks.find(task => task._id === id);\n    if (task) {\n      const updatedTask = {\n        ...task,\n        done: !task.done\n      };\n      const response = await API.put(`task/${id}`, updatedTask);\n      if (response.status === 200) {\n        setTasks(tasks => tasks.map(task => task._id === id ? updatedTask : task));\n      }\n    } else {\n      const newTask = {\n        category: selectedCategory.name,\n        name: newTaskInput,\n        done: false\n      };\n      const response = await API.post(\"/task\", newTask);\n      if (response.status === 201) {\n        const createdTask = response.data.task;\n        setTasks(tasks => [...tasks, createdTask]);\n        setNewTaskInput(\"\");\n      }\n    }\n  }, [tasks, selectedCategory, newTaskInput]);\n  const categoryColors = useMemo(() => [{\n    index: 0,\n    bgColor: \"danger.500\"\n  }, {\n    index: 1,\n    bgColor: \"purple.500\"\n  }, {\n    index: 2,\n    bgColor: \"green.500\"\n  }, {\n    index: 3,\n    bgColor: \"primary.500\"\n  }, {\n    index: 4,\n    bgColor: \"warning.500\"\n  }], []);\n  const handleCategoryAdd = useCallback(async () => {\n    const newCategory = newCategoryInput.trim();\n    if (newCategory !== \"\" && !categories.includes(newCategory)) {\n      try {\n        const response = await API.post(\"/category\", {\n          name: newCategory\n        });\n        const createdCategory = response.data.category;\n        setCategories(categories => [...categories, createdCategory]);\n        setSelectedCategory(createdCategory);\n        setNewCategoryInput(\"\");\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }, [newCategoryInput, categories]);\n  const handleCategoryDelete = useCallback(async categoryId => {\n    try {\n      const response = await API.delete(`/category/${categoryId}`);\n      if (response.status === 200) {\n        setCategories(categories => categories.filter(category => category._id !== categoryId));\n        setSelectedCategory(\"All Tasks\");\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"my-4\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        sm: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            children: /*#__PURE__*/_jsxDEV(FormLabel, {\n              className: \"font-weight-bold\",\n              children: \"Categories\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 3\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: isLoadingCategories ? /*#__PURE__*/_jsxDEV(Spinner, {\n              animation: \"border\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 3\n            }, this) : isErrorCategories ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error loading categories\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 3\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"danger\",\n                className: \"mr-2 mb-2\",\n                size: \"sm\",\n                onClick: () => handleCategoryDelete(selectedCategory._id),\n                children: /*#__PURE__*/_jsxDEV(CloseSquareOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 3\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 3\n              }, this), categories.map(category => /*#__PURE__*/_jsxDEV(Badge, {\n                variant: selectedCategory._id === category._id ? \"primary\" : \"secondary\",\n                className: \"mr-2 mb-2\",\n                style: {\n                  backgroundColor: categoryColors[category.index % 5].bgColor\n                },\n                onClick: () => setSelectedCategory(category),\n                children: category.name\n              }, category._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 3\n              }, this)), /*#__PURE__*/_jsxDEV(InputGroup, {\n                children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                  placeholder: \"Add new category\",\n                  value: newCategoryInput,\n                  onChange: e => setNewCategoryInput(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 3\n                }, this), /*#__PURE__*/_jsxDEV(InputGroup.Append, {\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"primary\",\n                    onClick: handleCategoryAdd,\n                    children: /*#__PURE__*/_jsxDEV(FormOutlined, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 176,\n                      columnNumber: 3\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 175,\n                    columnNumber: 3\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 3\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 3\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 3\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        sm: 8,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            children: /*#__PURE__*/_jsxDEV(FormLabel, {\n              className: \"font-weight-bold\",\n              children: selectedCategory.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 3\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: isLoadingTasks ? /*#__PURE__*/_jsxDEV(Spinner, {\n              animation: \"border\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 3\n            }, this) : isErrorTasks ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error loading tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 3\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [tasks.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No tasks found.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 26\n              }, this), tasks.filter(task => selectedCategory === \"All Tasks\" || task.category === selectedCategory.name).map(task => /*#__PURE__*/_jsxDEV(Row, {\n                className: \"my-2\",\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  xs: 1,\n                  sm: 1,\n                  md: 1,\n                  children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                    type: \"checkbox\",\n                    checked: task.done,\n                    onChange: () => handleBadge(task._id)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 3\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 3\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  xs: 10,\n                  sm: 10,\n                  md: 11,\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: task.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 212,\n                    columnNumber: 3\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 3\n                }, this)]\n              }, task._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 3\n              }, this)), /*#__PURE__*/_jsxDEV(InputGroup, {\n                children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                  placeholder: \"Add new task\",\n                  value: newTaskInput,\n                  onChange: e => setNewTaskInput(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 3\n                }, this), /*#__PURE__*/_jsxDEV(InputGroup.Append, {\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"primary\",\n                    onClick: () => handleBadge(),\n                    children: /*#__PURE__*/_jsxDEV(FormOutlined, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 224,\n                      columnNumber: 3\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 223,\n                    columnNumber: 3\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 3\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 3\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 3\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 3\n  }, this);\n}\n_s(TodoList, \"JCnkovwf0i1cjSHC/IOOPyjMR+g=\", false, function () {\n  return [useQuery, useQuery];\n});\n_c = TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useQuery","CloseSquareOutlined","FormOutlined","Spinner","Badge","Button","Card","Col","Container","FormControl","FormLabel","InputGroup","Row","API","TodoList","tasks","setTasks","categories","setCategories","newCategoryInput","setNewCategoryInput","selectedCategory","setSelectedCategory","newTaskInput","setNewTaskInput","isLoading","isLoadingCategories","data","categoriesData","isError","isErrorCategories","response","get","length","name","isLoadingTasks","tasksData","isErrorTasks","handleBadge","id","task","find","_id","updatedTask","done","put","status","map","newTask","category","post","createdTask","categoryColors","index","bgColor","handleCategoryAdd","newCategory","trim","includes","createdCategory","err","console","error","handleCategoryDelete","categoryId","delete","filter","backgroundColor","e","target","value"],"sources":["/home/kiki/Documents/test/permata-test/client/src/components/card/TodoList.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { CloseSquareOutlined, FormOutlined } from \"@ant-design/icons\";\nimport {\nSpinner,\nBadge,\nButton,\nCard,\nCol,\nContainer,\nFormControl,\nFormLabel,\nInputGroup,\nRow,\n} from \"react-bootstrap\";\nimport { API } from \"../../config/api\";\n\nexport default function TodoList() {\nconst [tasks, setTasks] = useState([]);\nconst [categories, setCategories] = useState([]);\n\nconst [newCategoryInput, setNewCategoryInput] = useState(\"\");\nconst [selectedCategory, setSelectedCategory] = useState(\"All Tasks\");\nconst [newTaskInput, setNewTaskInput] = useState(\"\");\n\nconst { isLoading: isLoadingCategories, data: categoriesData, isError: isErrorCategories } = useQuery(\n\"categories\",\nasync () => {\nconst response = await API.get(\"/categories\");\nreturn response.data.categories;\n}\n);\n\nuseEffect(() => {\nif (categoriesData && categoriesData.length > 0) {\nsetCategories(categoriesData);\nsetSelectedCategory(categoriesData[0].name);\n}\n}, [categoriesData]);\n\n// Fetch tasks\nconst { isLoading: isLoadingTasks, data: tasksData, isError: isErrorTasks } = useQuery(\n\"tasks\",\nasync () => {\nconst response = await API.get(\"/tasks\");\nreturn response.data.tasks;\n}\n);\n\nuseEffect(() => {\nif (tasksData) {\nsetTasks(tasksData);\n}\n}, [tasksData]);\n\nconst handleBadge = useCallback(async (id) => {\nconst task = tasks.find((task) => task._id === id);\nif (task) {\nconst updatedTask = { ...task, done: !task.done };\nconst response = await API.put(`task/${id}`, updatedTask);\nif (response.status === 200) {\nsetTasks((tasks) =>\ntasks.map((task) => (task._id === id ? updatedTask : task))\n);\n}\n} else {\nconst newTask = {\ncategory: selectedCategory.name,\nname: newTaskInput,\ndone: false,\n};\nconst response = await API.post(\"/task\", newTask);\nif (response.status === 201) {\nconst createdTask = response.data.task;\nsetTasks((tasks) => [...tasks, createdTask]);\nsetNewTaskInput(\"\");\n}\n}\n}, [tasks, selectedCategory, newTaskInput]);\n\nconst categoryColors = useMemo(() => [\n{\nindex: 0,\nbgColor: \"danger.500\",\n},\n{\nindex: 1,\nbgColor: \"purple.500\",\n},\n{\nindex: 2,\nbgColor: \"green.500\",\n},\n{\nindex: 3,\nbgColor: \"primary.500\",\n},\n{\nindex: 4,\nbgColor: \"warning.500\",\n},\n], []);\n\nconst handleCategoryAdd = useCallback(async () => {\nconst newCategory = newCategoryInput.trim();\nif (newCategory !== \"\" && !categories.includes(newCategory)) {\ntry {\nconst response = await API.post(\"/category\", { name: newCategory });\nconst createdCategory = response.data.category;\nsetCategories((categories) => [...categories, createdCategory]);\nsetSelectedCategory(createdCategory);\nsetNewCategoryInput(\"\");\n} catch (err) {\nconsole.error(err);\n}\n}\n}, [newCategoryInput, categories]);\n\nconst handleCategoryDelete = useCallback(async (categoryId) => {\n  try {\n  const response = await API.delete(`/category/${categoryId}`);\n  if (response.status === 200) {\n  setCategories((categories) =>\n  categories.filter((category) => category._id !== categoryId)\n  );\n  setSelectedCategory(\"All Tasks\");\n  }\n  } catch (err) {\n  console.error(err);\n  }\n  }, []);\n  \n  return (\n  <Container>\n  <Row className=\"my-4\">\n  \n  <Col xs={12} sm={4}>\n  <Card>\n  <Card.Header>\n  <FormLabel className=\"font-weight-bold\">Categories</FormLabel>\n  </Card.Header>\n  <Card.Body>\n  {isLoadingCategories ? (\n  <Spinner animation=\"border\" />\n  ) : isErrorCategories ? (\n  <p>Error loading categories</p>\n  ) : (\n  <>\n  <Button\n  variant=\"danger\"\n  className=\"mr-2 mb-2\"\n  size=\"sm\"\n  onClick={() => handleCategoryDelete(selectedCategory._id)}\n  >\n  <CloseSquareOutlined />\n  </Button>\n  {categories.map((category) => (\n  <Badge\n  key={category._id}\n  variant={selectedCategory._id === category._id ? \"primary\" : \"secondary\"}\n  className=\"mr-2 mb-2\"\n  style={{ backgroundColor: categoryColors[category.index % 5].bgColor }}\n  onClick={() => setSelectedCategory(category)}\n  >\n  {category.name}\n  </Badge>\n  ))}\n  <InputGroup>\n  <FormControl\n  placeholder=\"Add new category\"\n  value={newCategoryInput}\n  onChange={(e) => setNewCategoryInput(e.target.value)}\n  />\n  <InputGroup.Append>\n  <Button variant=\"primary\" onClick={handleCategoryAdd}>\n  <FormOutlined />\n  </Button>\n  </InputGroup.Append>\n  </InputGroup>\n  </>\n  )}\n  </Card.Body>\n  </Card>\n  </Col>\n  <Col xs={12} sm={8}>\n  <Card>\n  <Card.Header>\n  <FormLabel className=\"font-weight-bold\">{selectedCategory.name}</FormLabel>\n  </Card.Header>\n  <Card.Body>\n  {isLoadingTasks ? (\n  <Spinner animation=\"border\" />\n  ) : isErrorTasks ? (\n  <p>Error loading tasks</p>\n  ) : (\n  <>\n  {tasks.length === 0 && <p>No tasks found.</p>}\n  {tasks\n  .filter(\n  (task) => selectedCategory === \"All Tasks\" || task.category === selectedCategory.name\n  )\n  .map((task) => (\n  <Row key={task._id} className=\"my-2\">\n  <Col xs={1} sm={1} md={1}>\n  <Form.Check\n  type=\"checkbox\"\n  checked={task.done}\n  onChange={() => handleBadge(task._id)}\n  />\n  </Col>\n  <Col xs={10} sm={10} md={11}>\n  <p>{task.name}</p>\n  </Col>\n  </Row>\n  ))}\n  <InputGroup>\n  <FormControl\n  placeholder=\"Add new task\"\n  value={newTaskInput}\n  onChange={(e) => setNewTaskInput(e.target.value)}\n  />\n  <InputGroup.Append>\n  <Button variant=\"primary\" onClick={() => handleBadge()}>\n  <FormOutlined />\n  </Button>\n  </InputGroup.Append>\n  </InputGroup>\n  </>\n  )}\n  </Card.Body>\n  </Card>\n  </Col>\n  </Row>\n  </Container>\n  );\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}